Control: ON/OFF
This code uses an analogÂ sensor (LDR) and an actuator (LED) to implement an ON/OFF control system with hysteresis.
The analog sensor is used to control the actuator. 
Four pushbuttons are also used, two of which are used as up and down arrows to change the hysteresis and setpoint. 
The LCD display's left and right pushbuttons are used to switch between its various screens. 
Process variable (PV), setpoint (SP), control output (CO), and hysteresis values are shown on the LCD screen as well as the serial monitor.
*/



int sensor = A5;  // Set pin for the LDR 
int actuator = 6; // digital pin for the LED
int PV = 0;       // PV (also the LDR value)
int setPoint = 0; // Setpoint variable value
int CO = 0;  // Control output value
int HYS = 10;  // Hysteresis starting value
int ST = 0; // sreen number 


// Pushbuttons
const int buttonPin1 = 10;
const int buttonPin2 = 9;
const int buttonPin3 = 8;
const int buttonPin4 = 7;


// Button states and debounce variables
bool buttonState1, lastButtonState1, buttonState2, lastButtonState2, buttonState3, lastButtonState3, buttonState4, lastButtonState4 = false;
unsigned long lastButtonPress1, lastButtonPress2, lastButtonPress3, lastButtonPress4 = 0;
const unsigned long debounceDelay = 50;


// LCD page variable
int currentPage = 0;

#include <LiquidCrystal.h>  //include the LiquidCrystal library for LCD control
// LCD pin connections
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);


void setup() {
 lcd.begin(16, 2);  // Set up LCD's number of colums and rows     
 pinMode(actuator, OUTPUT); // Declare Actuator as OUTPUT
 pinMode(buttonPin1, INPUT_PULLUP); // Declare pushbutton #1 as an INPUT PULLUP
 pinMode(buttonPin2, INPUT_PULLUP); // Declare pushbutton #2 as an INPUT PULLUP
 pinMode(buttonPin3, INPUT_PULLUP); // Declare pushbutton #3 as an INPUT PULLUP
 pinMode(buttonPin4, INPUT_PULLUP); // Declare pushbutton #4 as an INPUT PULLUP
 Serial.begin(9600); // Initialize Serial Monitor with baud rate of 9600
}


void loop() {



 // Debounce and button actions
 buttonState1 = digitalRead(buttonPin1);  // Read state of PB1
 buttonState2 = digitalRead(buttonPin2);  // Read state of PB2
 buttonState3 = digitalRead(buttonPin3);  // Read state of PB3
 buttonState4 = digitalRead(buttonPin4);  // Read state of PB4

 //  Print SP, PV and CO on the Serial Monitor
Serial.print(" \t SP = ");
Serial.print(setPoint);
Serial.print(" \t CO = ");
Serial.println (CO);
Serial.print("\t PV = ");
Serial.print(PV);
// Serial.print("\tHYS = ");
// Serial.print(HYS);
// Serial.print("\tPage = ");
// Serial.println(currentPage);


 if (!buttonState1 && lastButtonState1 && (millis() - lastButtonPress1) > debounceDelay) {
   currentPage--;
   if (currentPage < 0) currentPage = 3;
   lastButtonPress1 = millis();  // Update the last time PB1 press 
 }
 lastButtonState1 = buttonState1; // Store current PB1 state


 if (!buttonState2 && lastButtonState2 && (millis() - lastButtonPress2) > debounceDelay) {
   currentPage++;
   if (currentPage > 3) currentPage = 0;
   lastButtonPress2 = millis(); // Update the last time PB2 press 
 }
 lastButtonState2 = buttonState2; // Store current PB2 state


   if (!buttonState3 && lastButtonState3 && (millis() - lastButtonPress3) > debounceDelay) {
   if (currentPage == 0) {
     setPoint += 30; // Increase SP by 30 if on the screen 0
   } else if (currentPage == 3) {
     HYS += 30 ; // Increase HYS by 30 if on the screen 3
   }
   lastButtonPress3 = millis(); // Update the last time PB3 press 
 }
 lastButtonState3 = buttonState3; // Store current PB3 state


 if (!buttonState4 && lastButtonState4 && (millis() - lastButtonPress4) > debounceDelay) {
   if (currentPage == 0) {
     setPoint -= 30;  // Decrease SP by 30 if on the screen 0
   } else if (currentPage == 3) {
     HYS -= 30 ; // Decrease HYS by 30 if on the screen 3
   }
   lastButtonPress4 = millis(); // Update the last time PB4 press 
 }
 lastButtonState4 = buttonState4; // Store current PB4 state


 // Update the LCD display based on currentPage
 lcd.clear();
 switch (currentPage) {
   case 0:
     lcd.setCursor(0, 0);
     lcd.print("SP:");
     lcd.print(setPoint);
     break;
   case 1:
     lcd.setCursor(0, 0);
     lcd.print("PV:");
     lcd.print(PV);
     break;
   case 2:
      lcd.setCursor(0, 0);
     lcd.print("CO:");
     lcd.print(CO); 
     break;
    case 3:  
     lcd.setCursor(0, 0);
     lcd.print("HYS:");
     lcd.print(HYS);
     break;

 }


  PV = analogRead(sensor);
if (PV <(setPoint - HYS)){
   CO = 255; // Set CO to 255 if PV is below (setpoint - hysteresis)
 } if (PV >= (setPoint+ HYS)){
   CO = 0;  // Set CO to 0 if PV is above (setpoint - hysteresis)
 }
  // Writing CO to the LED
 analogWrite(actuator, CO);
}


